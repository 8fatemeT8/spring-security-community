/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE")
		classpath("org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4")
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
		classpath 'io.spring.gradle:spring-build-conventions:0.0.16.RELEASE'
	}
}

apply plugin: 'io.spring.convention.root'

def coreProjects = subprojects.findAll { !it.name.contains("sample") }

configure(allprojects) { project ->
	group = "org.springframework.security.extensions"

	ext.slf4jVersion = "1.7.25"
	ext.springVersion = "5.1.5.RELEASE"
	ext.springSecurityVersion = "5.1.5.RELEASE"
	ext.bcprovVersion = "1.60"
	ext.openSamlVersion = "3.3.0"
	ext.commonsLoggingVersion = "1.2"
	ext.springBootVersion = "2.0.7.RELEASE"
	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
	ext.junitVersion = "5.3.2"
	ext.jodaTimeVersion = "2.10.1"
	ext.httpClientVersion = "4.5.6"
	ext.thymeleafExtrasSpringSecurityVersion = "3.0.4.RELEASE"

	apply plugin: "propdeps"
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply from: "${gradleScriptDir}/ide.gradle"
	apply plugin: 'org.junit.platform.gradle.plugin'

	compileJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}
	compileTestJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	test {
		systemProperty("java.awt.headless", "true")
		maxParallelForks = project.maxParallelForks as int
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile(group: "org.junit.jupiter", name: "junit-jupiter-api", version: "$junitVersion")
		testCompile(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "$junitVersion")
	}


	ext.javadocLinks = [
		"https://docs.oracle.com/javase/8/docs/api/",
		"https://docs.oracle.com/javaee/7/api/",
	] as String[]
}
configure(rootProject) {
	description = "Spring Security Community Example Code"

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"

		dependsOn {
			coreProjects.collect {
				it.tasks.getByName("jar")
			}
		}
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.splitIndex = true
		options.links(project.ext.javadocLinks)

		source coreProjects.collect { project ->
			project.sourceSets.main.allJava
		}

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")

		doFirst {
			classpath += files(coreProjects.collect { it.sourceSets.main.compileClasspath })
		}
	}

}
